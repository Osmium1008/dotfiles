#+title: config.el
#+AUTHOR: Osmium_1008
#+STARTUP: show2levels

* config.el
** header

#+begin_src emacs-lisp :tangle lisp/config.el
  ;;; config.el --- Emacs settings -*- coding: utf-8; lexical-binding: t; -*-
  ;; Author: Osmium_1008 (osmium1008@gmail.com)
  ;; Version: 0.1

  ;;; Commentary:

  ;;; Code:
#+end_src

** OS distinction
使ってないけどOSの判別結果が入力されている
#+begin_src emacs-lisp :tangle lisp/config.el
  (defconst IS-MAC (eq system-type 'darwin))
  (defconst IS-LINUX (memq system-type '(gnu gnu/linux gnu/kfreebsd berkeley-unix)))
  (defconst IS-WINDOWS (memq system-type '(cygwin windows-nt ms-dos)))
#+end_src

** leaf.el
わりと柔軟に書ける設定マネージャ
#+begin_src emacs-lisp :tangle lisp/config.el
  (eval-and-compile
    (customize-set-variable
     'package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))
    (package-initialize)
    (use-package leaf :ensure t)

    (leaf leaf-keywords
      :ensure t
      :init
      (leaf blackout :ensure t)
      :config
      (leaf-keywords-init)))

  (leaf leaf-tree
    :doc "Interactive sidebar feature for leaf.el"
    :ensure t)

  (leaf leaf-convert
    :doc "Convert many format to leaf format"
    :ensure t)
#+end_src

** cus-edit
init.elをいじってほしくないので...
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf cus-edit
    :doc "tools for customizing Emacs and Lisp packages"
    :custom `((custom-file . ,(locate-user-emacs-file "custom.el"))))
#+end_src

** customize settings
標準機能に関する設定
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf cus-start
    :doc "define customization properties of builtins"
    :tag "out-of-MELPA" "internal"
    :added "2025-05-26"
    :preface
    (defun c/redraw-frame nil ; Do nothing.
      (interactive)
      (redraw-frame))

    :bind (("M-ESC ESC" . c/redraw-frame)) ; Do nothing when triple tapped ESC.

    :custom '((user-full-name . "Suomi Sawano")
              (user-mail-address . "osmium1008@gmail.com")
              (user-login-name . "osmium_1008")
              (create-lockfiles . nil) ; Don't create lockfile
              (tab-width . 4) ; Set indent width to 4em
              (debug-on-error . t) ; show debug msg
              (init-file-debug . t)
              (frame-resize-pixelwise . t) 
              (enable-recursive-minibuffers . t)
              (history-length . 1000)
              (history-delete-duplicates . t)
              (scroll-preserve-screen-position . t)
              (scroll-conservatively . 100)
              (mouse-wheel-scroll-amount . '(1 ((control) . 5)))
              (ring-bell-function . 'ignore)
              (text-quoting-style . 'straight)
              (truncate-lines . t)
              (use-dialog-box . nil)
              (use-file-dialog . nil)
              (menu-bar-mode . t)
              (tool-bar-mode . nil)
              (scroll-bar-mode . nil)
              (indent-tabs-mode . nil))
    :config
    (set-frame-parameter)
    (prefer-coding-system 'utf-8-unix)
    (keyboard-translate ?\C-h ?\C-?))
#+end_src

** startup
スプラッシュスクリーンいらない...
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf startup
    :doc "startup commands"
    :custom `((inhibit-startup-screen . t)
              (auto-save-list-file-prefix . ,(locate-user-emacs-file "backup/.saves-"))))
#+end_src

** autorevert
他アプリによる編集を即時反映する らしい
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf autorevert
    :doc "revert buffers when files on disk change"
    :global-minor-mode global-auto-revert-mode)
#+end_src

** delsel
選択範囲を消してから編集を行う 慣れたモード
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf delsel
    :doc "delete selection if you insert"
    :global-minor-mode delete-selection-mode)
#+end_src

** files
自動保存とかに関する設定
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf files
    :doc "file input and output commands for Emacs"
    :global-minor-mode auto-save-visited-mode
    :custom `((auto-save-file-name-transforms . '((".*" ,(locate-user-emacs-file "backup/") t)))
              (backup-directory-alist . '((".*" . ,(locate-user-emacs-file "backup"))
                                          (,tramp-file-name-regexp . nil)))
              (version-control . t)
              (delete-old-versions . t)
              (auto-save-visited-interval . 30)))
#+end_src

** simple
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf simple
    :doc "basic editing commands for Emacs"
    :custom ((kill-read-only-ok . t)
             (kill-whole-line . t)
             (eval-expression-print-length . nil)
             (eval-expression-print-level . nil)))
#+end_src

** vc-git
モードライン表示の抑制のため
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf vc-git
    :preface
    (defun filter-for-vc-mode-line (str) (substring str 4))
    :doc "VC backend for the git version control system"
    :advice
    (:filter-return vc-git-mode-line-string filter-for-vc-mode-line))
#+end_src

** which-key
キー入力に関するヘルプを生成してくれる なんとビルトイン
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf which-key
    :doc "Display available keybindings in popup"
    :ensure t
    :custom ((which-key-popup-type . 'side-window))
    :config
    (which-key-setup-side-window-right-bottom)
    :global-minor-mode t)
#+end_src

** flycheck
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf flycheck
    :doc "On-the-fly syntax checking"
    :req "emacs-27.1"
    :tag "tools" "languages" "convenience" "emacs>=27.1"
    :url "https://www.flycheck.org"
    :added "2025-05-26"
    :ensure t
    :global-minor-mode global-flycheck-mode)
#+end_src

** AUCTeX
TeX編集支援
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf tex
    :ensure auctex
    :init
    (leaf auctex-latexmk :ensure t)
    :custom ((reftex-plug-into-AUCTeX . t)
             (TeX-parse-self . t)
             (TeX-command-default . "latexmk")
             (TeX-engine . 'luatex)))
  (leaf reftex
    :hook ((TeX-mode-hook LaTeX-mode-hook) . (turn-on-reftex LaTeX-math-mode outline-minor-mode TeX-source-correlate-mode auctex-latexmk-setup TeX-PDF-mode))
    :custom ((reftex-toc-split-windows-horizontally . t)
             (reftex-cite-prompt-optional-args . t)
             (reftex-toc-split-windows-fraction . 0.3))
    :global-minor-mode t)
#+end_src

** Magit
Gitプラグイン
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf magit
    :ensure t
    :preface
    (defun mu-magit-kill-buffers ()
      "Restore window configuration and kill all Magit buffers."
      (interactive)
      (let ((buffers (magit-mode-get-buffers)))
        (magit-restore-window-configuration)
        (mapc #'kill-buffer buffers)))
    :custom ((magit-define-global-key-bindings . nil))
    :bind (("C-x g" . magit-status)
           ("C-c g" . magit-dispatch)
           ("C-c f" . magit-file-dispatch)
           (magit-status-mode-map
            ("q" . mu-magit-kill-buffers))))
#+end_src

** completion
検索や補完に関する諸々のプラグイン
*** UI and Fuzzy-Finder
ddu.vimとかtelescopeとか相当の諸々など
**** Vertico
UI提供プラグイン
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf vertico
    :ensure t
    :custom ((vertico-count . 20)
             (vertico-resize . nil)
             (vertico-cycle . t))
    :global-minor-mode t)
#+end_src

**** consult
補完対象の生成 source相当?
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf consult
    :bind (;; どうせisearchは使わないので...
           ("C-s" . consult-line)
           ;; search系列
           ("M-s b" . consult-buffer)
           ("M-s M-b" . consult-buffer-other-window)
           ("M-s M-m" . consult-mode-command)
           ("M-s M-g" . consult-git-grep)
           ("M-s l" . consult-line)
           ("M-s M-l" . consult-line-multi)
           ;; jump系列
           ("M-g l" . consult-goto-line)
           ("M-g M-g" . consult-goto-line)
           ("M-g o" . consult-outline)
           ("M-g m" . consult-mark)
           ("M-g i" . consult-imenu)
           ("M-g M-i" . consult-imenu-multi)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flyckeck)
           )
    :ensure t)
#+end_src

**** affe
async fuzzy finderな感じのプラグイン consultのfindとgrepが若干使いづらいっぽいので
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf affe
    :ensure t
    :preface
    (defun affe-find-document-dir ()
      (interactive)
      (affe-find (expand-file-name "~/Documents")))
    (defun affe-find-dotfiles-dir ()
      (interactive)
      (affe-find (expand-file-name "~/dotfiles")))
    (defun affe-find-home-dir ()
      (interactive)
      (affe-find (expand-file-name "~/")))
    :bind (("M-s g" . affe-grep)
           ("M-s f" . affe-find)
           ("M-s F" . affe-find-document-dir)
           ("M-s M-f" . affe-find-dotfiles-dir)
           ("M-s C-f" . affe-find-home-dir))
    :custom ((affe-highlight-function . 'orderless-highlight-matches)
             (affe-regexp-function . 'orderless-pattern-compiler)
             (affe-find-command . "fd --color=never --full-path")))
#+end_src

**** marginalia
それっぽい補完候補の説明の生成
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf marginalia :ensure t :global-minor-mode t)
#+end_src

*** inline-complete
**** corfu
補完インターフェースを提供するパッケージ
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf corfu
    :ensure t
    :custom ((corfu-auto . t)
             (corfu-auto-delay . 0)
             (corfu-popupinfo-delay . 0)
             (corfu-auto-prefix . 3)
             (corfu-cycle . t)
             (corfu-preselect . 'prompt)
             (text-mode-ispell-word-completion . nil))
    :bind (corfu-map
           ("TAB" . corfu-insert)
           ("<tab>" . corfu-insert)
           ("RET" . nil)
           ("<return>" . nil)
           ("M-SPC" . corfu-insert-separator)
           )
    :global-minor-mode global-corfu-mode corfu-popupinfo-mode)

#+end_src

**** cape
補完プラグイン系の構造よく知らないけどたぶんsource設定支援プラグイン
corfuとtempelのintegrationとかやってくれる はず
なんかしらないけどcape-elisp-symbolが上手く動かない... → そういうものだった
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf cape
    :ensure t
    :custom
    ((cape-dabbrev-check-other-buffers . nil))
    :config
    (setopt completion-at-point-functions (list
                                           (cape-capf-noninterruptible
                                            (cape-capf-buster
                                             (cape-capf-properties
                                              (cape-capf-super ;; 補完候補を結合
                                               #'tempel-complete
                                               #'cape-elisp-block
                                               #'cape-file
                                               #'cape-keyword
                                               #'cape-dabbrev
                                               #'cape-abbrev)
                                              :sort t
                                              :exclusive 'no)))))
    (add-hook 'eglot--managed-mode-hook (lambda ()
                                          (setq-local
                                           completion-at-point-functions
                                           (list
                                            (cape-capf-noninterruptible
                                             (cape-capf-buster
                                              (cape-capf-properties
                                               (cape-capf-super ;; 補完候補を結合
                                                #'tempel-complete
                                                #'eglot-completion-at-point
                                                #'cape-keyword
                                                #'cape-dabbrev
                                                #'cape-abbrev)
                                               :sort t
                                               :exclusive 'no)))))))
    )
#+end_src

**** tempel
スニペット提供ソース
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf tempel :ensure t)
#+end_src

***** tempel-collection
スニペット集
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf tempel-collection :ensure t :after tempel)  
#+end_src

*** eglot
軽量なLSPクライアント
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf eglot
    :custom ((eglot-echo-area-use-multiline-p . nil))
    :require t
    :hook (((TeX-mode-hook LaTeX-mode-hook) . eglot-ensure))
    :config
    (delete (assoc '(tex-mode context-mode texinfo-mode bibtex-mode)
                   eglot-server-programs)
            eglot-server-programs)
    (add-to-list 'eglot-server-programs
                 '((latex-mode tex-mode context-mode
                               texinfo-mode bibtex-mode)
                   . ("texlab"))))
#+end_src

**** eglot-booster
パフォーマンスを改善してくれる らしい
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf eglot-booster
    :when (executable-find "emacs-lsp-booster")
    :after eglot
    :vc ( :url "https://github.com/jdtsmith/eglot-booster")
    :global-minor-mode t)
#+end_src

**** eglot-tempel
スニペットをスニペットマネージャに流しこむ
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf eglot-tempel
    :ensure t
    :after eglot tempel
    :global-minor-mode t)
#+end_src

*** matcher
**** orderless
あいまい検索
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf orderless
    :doc "Completion style for matching regexps in any order"
    :ensure t
    :after corfu
    :custom ((completion-styles . '(orderless basic))
             (completion-category-defaults . nil)
             (completion-category-overrides . '((file (styles partial-completion))))))
#+end_src

**** prescient
賢く並べ替え
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf prescient
    :ensure t
    :custom ((prescient-aggressive-file-save . t))
    :global-minor-mode prescient-persist-mode)
#+end_src

***** corfu-prescient
corfu向けのprescient matcher
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf corfu-prescient
    :ensure t
    :after corfu prescient
    :custom ((corfu-prescient-enable-filtering . nil))
    :global-minor-mode t)
#+end_src

***** vertico-prescient
vertico向けの(ry
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf vertico-prescient
    :ensure t
    :after vertico prescient
    :custom ((vertico-prescient-enable-filtering . nil))
    :global-minor-mode t)
#+end_src

**** savehist
ミニバッファ履歴の保存 prescientと機能が被ってる気がしてならない
#+begin_src emacs-lisp :tangle lisp/config.el
  ;;  (leaf savehist
  ;;    :doc "Save minibuffer history"
  ;;    :custom `((savehist-file . ,(locate-user-emacs-file "savehist")))
  ;;    :global-minor-mode t)
#+end_src

*** Code Action
**** Embark
コードアクション生成器
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf embark
    :ensure t
    :bind (("s-e" . embark-act)))
#+end_src

***** embark-consult
consultへのインテグレーション
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf embark-consult
    :ensure t
    :after embark consult)
#+end_src

** puni
括り記号類をいい感じに編集する あと選択なども
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf puni
    :doc "Parentheses Universalistic"
    :req "emacs-26.1"
    :tag "tools" "lisp" "convenience" "emacs>=26.1"
    :url "https://github.com/AmaiKinono/puni"
    :added "2025-05-26"
    :ensure t
    :global-minor-mode puni-global-mode)
#+end_src

** elec-pair
括弧を勝手に閉じる
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf elec-pair
    :ensure t
    :global-minor-mode electric-pair-mode)
#+end_src

** vundo
安全なUndo らしい

#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf vundo
    :ensure t
    :bind (("C-x u" . vundo)
           ("C-/" . undo-only)
           ("C-?" . undo-redo))
    :custom (vundo-window-max-height . 10))
#+end_src

** appearances
見た目に関する設定をまとめる
*** font
どうせ入ってるUDEV Gothicを使う
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf font
    :added "2025-05-26"
    :config
    (leaf nerd-icons :ensure t)
    (let* ((family "UDEV Gothic NFLG")
           (fontspec (font-spec :family family :weight 'normal)))
      (set-face-attribute 'default nil :family family :height 130)
      (set-fontset-font nil 'ascii fontspec nil 'append)
      (set-fontset-font nil 'japanese-jisx0208 fontspec nil 'append)))
#+end_src
*** nerdfont
はい
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf nerd-icons
    :ensure t
    :custom ((nerd-icons-font-family . "UDEV Gothic NFLG")))
#+end_src

**** nerd-icons-corfu
corfuに対してiconを表示してあげる
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf nerd-icons-corfu
    :ensure t
    :after nerd-icons corfu
    :config
    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src

*** full-screen
こうしておくとフルスクにできるらしい
#+begin_src emacs-lisp :tangle lisp/config.el
  (add-hook 'window-setup-hook
            (lambda ()
              (set-frame-parameter nil 'fullscreen 'maximized)))
#+end_src

*** color-theme
いろんなプラグインへの配色機能を持っている優れたテーマ
いい感じのライトテーマも持っている
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf ef-themes
    :doc "customizable theme set"
    :ensure t
    :config
    (ef-themes-select 'ef-frost)
    (ef-themes-with-colors
      (custom-set-faces
       `(vc-edited-state ((t :foreground ,blue-cooler :inherit bold))))))
#+end_src

*** Moody
モードライン
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf moody
    :doc "Tabs and ribbons for the mode line"
    :req "emacs-26.1" "compat-30.0.1.0"
    :tag "faces" "emacs>=26.1"
    :url "https://github.com/tarsius/moody"
    :added "2025-05-26"
    :ensure t
    :config
    (moody-replace-mode-line-front-space)
    (moody-replace-mode-line-buffer-identification)
    (moody-replace-vc-mode))
#+end_src

*** Minions
マイナーモードを適宜折り畳んでくれる
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf minions
    :doc "simplify minor mode display"
    :ensure t
    :global-minor-mode minions-mode)
#+end_src

*** mlscroll
モードラインにスクロールバーを表示してくれる モードラインがなんとなく寂しいので入れるだけ入れておく
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf mlscroll
    :ensure t
    :custom ((mlscroll-width-chars . 12))
    :global-minor-mode mlscroll-mode)
#+end_src

*** hl-line
編集中の行をハイライトしてくれる
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf hl-line
    :doc "highlight current line"
    :global-minor-mode global-hl-line-mode)
#+end_src

*** posframe
補完フレームっぽいものを表示してくれる ddskk用に...
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf posframe :ensure t)
#+end_src

*** paren
Highlighting parenthesis.
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf paren
    :doc "highlight matching paren"
    :global-minor-mode show-paren-mode)
#+end_src

*** diff-hl
Gitとかの更新情報を持ってきて表示してくれる
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf diff-hl
    :ensure t
    :global-minor-mode global-diff-hl-mode diff-hl-flydiff-mode diff-hl-show-hunk-mouse-mode)
#+end_src

** org-mode
*** org
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf org
    :custom ((org-startup-indented . t)
             (org-indent-indentation-per-level . 4)
             (org-use-speed-commands . t)
             (org-startup-folded 'content)))
#+end_src

*** org-modern
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf org-modern
    :ensure t
    :custom ((org-modern-star . "Replace"))
    :global-minor-mode global-org-modern-mode)

  (leaf org-modern-indent
    :vc (:url "https://github.com/jdtsmith/org-modern-indent.git")
    :config
    (add-hook 'org-mode-hook #'org-modern-indent-mode 90))
#+end_src

** SKK
*** ddskk
こうしておけばひとまず普通に日本語が打てるようにはなる。
とりあえず標準のAZIKも有効化しておいた それなりには使える
なぜかconfigが発火していない気がするが... Afterも怪しいしどうなってるのやら...
customはskkeletonとかと同じ感じで打てるようにしてみている (本当に?)
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf ddskk
    :commands (skk-make-indicator-alist
               skk-mode-exit)
    :vc (:url "https://github.com/skk-dev/ddskk")
    :bind (("C-x C-j" . skk-mode)
           ("C-x j" . skk-mode)
           ("C-\\" . skk-mode))
    :init (defvar dired-bind-jump nil)
    :custom `((skk-server-host . "localhost")
              (skk-server-portnum . 1178)
              (skk-init-file . "")
              (skk-byte-compile-init-file . nil)
              (skk-latin-mode-string . "_@")
              (skk-hiragana-mode-string . "あ")
              (skk-katakana-mode-string . "ア")
              (skk-jisx0208-latin-mode-string . "Ａ")
              (skk-abbrev-mode-string . "aA")
              (default-input-method . "japanese-skk")
              (skk-preload . t)
              ;;(skk-show-mode-show . t) わりと不調の原因になっているので...
              ;;(skk-show-mode-style . 'tooltip) なにやら上手く動作しない
              (skk-henkan-strict-okuri-precedence . t)
              (skk-egg-like-newline . t)
              (skk-delete-implies-kakutei . nil)
              (skk-delete-okuri-when-quit . t)
              (skk-indicator-prefix . "SKK:[")
              (skk-indicator-suffix-func . #'(lambda (mode) "]:"))
              ;;(skk-user-directory . ,(locate-user-emacs-file ".ddskk"))
              ;;(skk-use-azik . t)
              (skk-use-color-cursor . nil)
              (skk-indicator-use-cursor-color . nil)
              ;;(skk-auto-insert-paren . t) 手動入力がバグるので無効化
              (skk-isearch-mode-enable . nil)
              ;;(skk-jisyo-code . 'utf-8-unix)
              (skk-azik-keyboard-type . 'us101)))
#+end_src

*** ddskk-posframe
posframeに変換候補を入れてくれるやつ after ddskkをすると上手く動かない なぜ?
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf ddskk-posframe
    :vc (:url "https://github.com/conao3/ddskk-posframe.el")
    :hook after-enable-theme-hook
    :custom ((ddskk-posframe-border-width . 2))
    :config
    (ef-themes-with-colors
      (custom-set-faces
       `(ddskk-posframe ((t :foreground ,fg-dim :background ,bg-dim)))
       `(ddskk-posframe-border ((t :background ,bg-alt)))))
    :global-minor-mode ddskk-posframe-mode)
#+end_src

*** custom-azik
AZIKをなんかいい感じに設定するための自作スクリプト 割と変な実装してる ちゃんとカタカナとかも変換できるので上出来
「っ」や「ん」なんかもしっかり送ってくれる
#+begin_src emacs-lisp :tangle lisp/config.el
  (leaf custom-azik
    :require t
    :hook skk-load-hook)
#+end_src

** footer
#+begin_src emacs-lisp :tangle lisp/config.el
  (provide 'config)
  ;;; config.el ends here
#+end_src
